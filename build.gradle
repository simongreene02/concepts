buildscript {
    ext.appGroup = 'com.djd.gig'
    ext.appVersion = '1.2-SNAPSHOT'
    ext.appDescription = 'gradle template'
    ext.slf4jVersion = '1.7.28'         // Latest as of 2019-08-10
    ext.guavaVersion = '28.1-jre'       // Latest as of 2019-08-28
    ext.spotlessVersion = '3.25.0'      // Latest as of 2019-10-07
    ext.jacocoVersion = '0.8.5'         // Latest as of 2019-10-11
    ext.formatVersion = '0.8'           // Latest as of 2018-11-29
    ext.junitPlatformVersion = '1.5.2'  // Latest as of 2019-09-08
    ext.junitJupiterVersion = '5.5.2'   // Latest as of 2019-09-08
    ext.mockitoVersion = '3.2.0'        // Latest as of 2019-11-29
    ext.truthCoreVersion = '1.0'        // Latest as of 2019-07-08
}
plugins {
    id('application') // distZip needs this plugin also need mainClassName
    id('java')
    id('jacoco')
    id('com.diffplug.gradle.spotless') version "$spotlessVersion"
    id('com.github.sherter.google-java-format') version "$formatVersion"
}
repositories {
    jcenter() // Superset of mavenCentral() and performance is better
}
application {
    // This is required for application plugin to run distZip task
    mainClassName = 'com.greatworksinc.concepts.Main'
}
dependencies {
    implementation("org.slf4j:slf4j-simple:${slf4jVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")

    //--- test dependencies ---//

    // junit platform
    testImplementation("org.junit.platform:junit-platform-engine:${junitPlatformVersion}")
    testImplementation("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    // junit jupiter
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    // truth
    testImplementation("com.google.truth:truth:${truthCoreVersion}")

    // mockito
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

}
spotless {
    java {
        // Check code format upon build
        googleJavaFormat()
    }
}
test {
    useJUnitPlatform()
}
jacoco {
    toolVersion = "$jacocoVersion"
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

group("$appGroup")
version("$appVersion")
description("$appDescription")

// Applies code format before compileJava task
compileJava.dependsOn(spotlessApply)

// Creates Html format of jacoco test coverage report in resports/jacoco at the end of the test.
test.finalizedBy(jacocoTestReport)

// Fails build if test coverage is below the limit. See jacocoTestCoverageVerification task block.
check.dependsOn(jacocoTestCoverageVerification)